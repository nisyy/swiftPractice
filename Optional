//Optional型
var a: String?
a = "hello"   
print(a)
//オプショナル型を操作するにはアンラップする必要がある
// var int1: Int = 1
// var int2: Int? = 2
// var result = int1 + int2
//Optional Binding
var c: Int?

// Optional型からアンラップする
if let b = c {
  print(b)
} else {
  print("値はありません")
}

//guard num がnilのときはfalse判定になり、returnする，値がある場合は、そのまま処理が続行される
func testGuard(num: Int?) {
    // nilだとreturnする 
    guard let unwrappedNum = num else { return }
    print(unwrappedNum)
}
testGuard(num: 5) 

//??演算子 値があった場合はデフォルト値はスキップされる。
var e : Int?
var f = e ?? 3
print(f)

//!演算子で強制アンラップ  値の存在が明らかな場合や値がないときはプログラムを終了させたい場合のみ使用
var g: Int? = 1
var h = g! + 1
print(h)

//暗黙的にアンラップ  nilであった場合は同様に実行時エラーが発生する
var i: Int! = 10
var j = i + 10 
print(j)
//Optional Chaining
var k: Int? = 10
if let l = k?.distance(to: 1) {
  print(l) 
}

//Null Safety言語のためコンパイルエラーになる
//var m: String?
//var n = m.uppercased()
